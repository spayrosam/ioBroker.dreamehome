{
  "version": 3,
  "sources": ["../../../src/typeguards/index.ts"],
  "sourcesContent": ["/**\n * Tests whether the given variable is a real object and not an Array\n * @param it The variable to test\n */\n\n// We need an extensive conditional type here because TS stopped simplifying/narrowing\n// correctly in 4.8 (https://github.com/microsoft/TypeScript/issues/50671)\nexport function isObject<T>(it: T): it is object extends T\n\t? // Narrow the `{}` type to an unspecified object\n\t\tT & Record<string | number | symbol, unknown>\n\t: unknown extends T\n\t\t? // treat unknown like `{}`\n\t\t\tT & Record<string | number | symbol, unknown>\n\t\t: T extends object // function, array, {} or actual object\n\t\t\t? T extends readonly unknown[]\n\t\t\t\t? never // not an array\n\t\t\t\t: T extends (...args: any[]) => any\n\t\t\t\t\t? never // not a function\n\t\t\t\t\t: T // no, an actual object\n\t\t\t: never {\n\t// This is necessary because:\n\t// typeof null === 'object'\n\t// typeof [] === 'object'\n\t// [] instanceof Object === true\n\treturn Object.prototype.toString.call(it) === \"[object Object]\";\n}\n\n/**\n * Tests whether the given variable is really an Array\n * @param it The variable to test\n */\n\n// We need an extensive conditional type here because TS stopped simplifying/narrowing\n// correctly in 4.8 (https://github.com/microsoft/TypeScript/issues/50671)\nexport function isArray<T>(\n\tit: T,\n): it is T extends readonly unknown[]\n\t? T\n\t: object extends T\n\t\t? T & unknown[]\n\t\t: never {\n\tif (Array.isArray != null) return Array.isArray(it);\n\treturn Object.prototype.toString.call(it) === \"[object Array]\";\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;;;;;;AAOM,SAAU,SAAY,IAAK;AAiBhC,SAAO,OAAO,UAAU,SAAS,KAAK,EAAE,MAAM;AAC/C;AASM,SAAU,QACf,IAAK;AAML,MAAI,MAAM,WAAW;AAAM,WAAO,MAAM,QAAQ,EAAE;AAClD,SAAO,OAAO,UAAU,SAAS,KAAK,EAAE,MAAM;AAC/C;",
  "names": []
}
