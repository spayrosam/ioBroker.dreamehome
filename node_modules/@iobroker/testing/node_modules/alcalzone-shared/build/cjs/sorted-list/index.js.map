{
  "version": 3,
  "sources": ["../../../src/sorted-list/index.ts"],
  "sourcesContent": ["import { type Comparer, defaultComparer } from \"../comparable/index.js\";\n\ninterface SortedListNode<T> {\n\tvalue: T;\n\tprev: SortedListNode<T> | undefined;\n\tnext: SortedListNode<T> | undefined;\n}\n\n/**\n * Seeks the list from the beginning and finds the position to add the new item\n */\nfunction findPrevNode<T>(\n\tfirstNode: SortedListNode<T>,\n\titem: T,\n\tcomparer: Comparer<T>,\n): SortedListNode<T> | undefined {\n\tlet ret: SortedListNode<T> | undefined;\n\tlet prevNode: SortedListNode<T> | undefined = firstNode;\n\t// while item > prevNode.value\n\twhile (prevNode != undefined && comparer(prevNode.value, item) > 0) {\n\t\tret = prevNode;\n\t\tprevNode = prevNode.next;\n\t}\n\treturn ret;\n}\n\n/**\n * Seeks the list from the beginning and returns the first item matching the given predicate\n */\nfunction findNode<T>(\n\tfirstNode: SortedListNode<T> | undefined,\n\tpredicate: (item: T) => boolean,\n): SortedListNode<T> | undefined {\n\tlet curNode: SortedListNode<T> | undefined = firstNode;\n\twhile (curNode != null) {\n\t\tif (predicate(curNode.value)) return curNode;\n\t\tcurNode = curNode.next;\n\t}\n}\n\nfunction wrappedDefaultComparer<T>(a: T, b: T) {\n\ttry {\n\t\treturn defaultComparer(a, b);\n\t} catch (e) {\n\t\tif (e instanceof Error && /cannot compare/.test(e.message)) {\n\t\t\tthrow new Error(\n\t\t\t\t\"For sorted lists with element types other than number or string, provide a custom comparer or implement Comparable<T> on the elements\",\n\t\t\t);\n\t\t} else {\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n\nfunction isIndex(prop: number | string | symbol): prop is string {\n\t// An indexer can only be a non-negative integer\n\tif (typeof prop === \"string\") prop = Number.parseInt(prop, 10);\n\tif (typeof prop !== \"number\" || !Number.isInteger(prop)) return false;\n\tif (prop < 0) return false;\n\treturn true;\n}\n\n/**\n * A list that automatically sorts its items to guarantee that they are always in order\n */\nexport class SortedList<T> {\n\tprivate first: SortedListNode<T> | undefined;\n\tprivate last: SortedListNode<T> | undefined;\n\n\tprivate _length: number = 0;\n\tpublic get length(): number {\n\t\treturn this._length;\n\t}\n\n\t/**\n\t * Creates a new empty sorted list\n\t */\n\tconstructor();\n\t/**\n\t * Creates a new sorted list from the given items\n\t * @param source Some items to initially add to the list\n\t */\n\tconstructor(source: Iterable<T>);\n\t/**\n\t * Creates a new sorted list\n\t * @param source Some items to initially add to the list or undefined to create an empty list\n\t * @param comparer A comparer method used to sort items of a special\n\t * type. Not necessary for numbers, strings and Comparable<T>\n\t */\n\tconstructor(source: Iterable<T> | undefined | null, comparer: Comparer<T>);\n\n\tconstructor(\n\t\tsource?: Iterable<T>,\n\t\tprivate readonly comparer: Comparer<T> = wrappedDefaultComparer,\n\t) {\n\t\tif (source != null) this.add(...source);\n\t\t// Enable indexed access\n\t\treturn new Proxy(this, {\n\t\t\tget(target, property, _receiver) {\n\t\t\t\tif (isIndex(property)) {\n\t\t\t\t\treturn target.get(parseInt(property, 10));\n\t\t\t\t} else {\n\t\t\t\t\treturn (target as any)[property];\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t}\n\n\t/** Inserts new items into the sorted list and returns the new length */\n\tpublic add(...items: T[]): number {\n\t\tfor (const item of items) {\n\t\t\tthis.addOne(item);\n\t\t}\n\t\treturn this._length;\n\t}\n\n\t/** Adds a single item to the list */\n\tprivate addOne(item: T) {\n\t\tconst newNode: SortedListNode<T> = {\n\t\t\tprev: undefined,\n\t\t\tnext: undefined,\n\t\t\tvalue: item,\n\t\t};\n\t\tif (this._length === 0) {\n\t\t\t// add the first item\n\t\t\tthis.first = this.last = newNode;\n\t\t} else {\n\t\t\t// add an item between two nodes\n\t\t\tconst prevNode = findPrevNode(this.first!, item, this.comparer);\n\t\t\tif (prevNode == null) {\n\t\t\t\t// the new node is the first one\n\t\t\t\tnewNode.next = this.first;\n\t\t\t\tnewNode.next!.prev = newNode;\n\t\t\t\tthis.first = newNode;\n\t\t\t} else {\n\t\t\t\tif (prevNode.next != null) {\n\t\t\t\t\tprevNode.next.prev = newNode;\n\t\t\t\t\tnewNode.next = prevNode.next;\n\t\t\t\t} else {\n\t\t\t\t\tthis.last = newNode;\n\t\t\t\t}\n\t\t\t\tprevNode.next = newNode;\n\t\t\t\tnewNode.prev = prevNode;\n\t\t\t}\n\t\t}\n\t\tthis._length++;\n\t}\n\n\t/** Removes items from the sorted list and returns the new length */\n\tpublic remove(...items: T[]): number {\n\t\tfor (const item of items) {\n\t\t\tthis.removeOne(item);\n\t\t}\n\t\treturn this._length;\n\t}\n\n\t/** Removes a single item from the list */\n\tprivate removeOne(item: T) {\n\t\tif (this._length === 0) return;\n\n\t\tconst node = this.findNodeForItem(item);\n\t\tif (node != null) this.removeNode(node);\n\t}\n\n\t/** Returns the item at the given index */\n\tpublic get(index: number): T | undefined {\n\t\tif (!isIndex(index)) throw new Error(`${index} is not a valid index`);\n\t\tlet curNode = this.first;\n\t\twhile (curNode != null && --index >= 0) {\n\t\t\tcurNode = curNode.next;\n\t\t}\n\t\treturn curNode != null ? curNode.value : undefined;\n\t}\n\n\t/** Removes the first item from the list and returns it */\n\tpublic shift(): T | undefined {\n\t\tif (this._length === 0) return;\n\t\tconst node = this.first!;\n\t\tthis.removeNode(node);\n\t\treturn node.value;\n\t}\n\n\t/** Returns the first item from the list without removing it */\n\tpublic peekStart(): T | undefined {\n\t\treturn this.first && this.first.value;\n\t}\n\n\t/** Removes the last item from the list and returns it */\n\tpublic pop(): T | undefined {\n\t\tif (this._length === 0) return;\n\t\tconst node = this.last!;\n\t\tthis.removeNode(node);\n\t\treturn node.value;\n\t}\n\n\t/** Returns the last item from the list without removing it */\n\tpublic peekEnd(): T | undefined {\n\t\treturn this.last && this.last.value;\n\t}\n\n\t/** Removes a specific node from the list */\n\tprivate removeNode(node: SortedListNode<T>) {\n\t\t// remove the node from the chain\n\t\tif (node.prev != null) {\n\t\t\tnode.prev.next = node.next;\n\t\t} else {\n\t\t\tthis.first = node.next;\n\t\t}\n\t\tif (node.next != null) {\n\t\t\tnode.next.prev = node.prev;\n\t\t} else {\n\t\t\tthis.last = node.prev;\n\t\t}\n\t\tthis._length--;\n\t}\n\n\t/** Tests if the given item is contained in the list */\n\tpublic contains(item: T): boolean {\n\t\treturn this.findNodeForItem(item) != null;\n\t}\n\n\t/** Returns the first item matching the given predicate */\n\tpublic find(predicate: (item: T) => boolean): T | undefined {\n\t\tconst ret = findNode(this.first, predicate);\n\t\tif (ret != undefined) return ret.value;\n\t}\n\n\t/** Returns the first item matching the given predicate */\n\tprivate findNodeForItem(item: T): SortedListNode<T> | undefined {\n\t\treturn findNode(this.first, (val) => this.comparer(val, item) === 0);\n\t}\n\n\t/** Removes all items from the list */\n\tpublic clear(): void {\n\t\tthis.first = this.last = undefined;\n\t\tthis._length = 0;\n\t}\n\n\tpublic *[Symbol.iterator](): Generator<T, void, unknown> {\n\t\tlet curItem = this.first;\n\t\twhile (curItem != null) {\n\t\t\tyield curItem.value;\n\t\t\tcurItem = curItem.next;\n\t\t}\n\t}\n\n\t/** Flattens this list into an array */\n\tpublic toArray(): T[] {\n\t\treturn [...this];\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
