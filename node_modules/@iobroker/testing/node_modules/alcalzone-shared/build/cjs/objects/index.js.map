{
  "version": 3,
  "sources": ["../../../src/objects/index.ts"],
  "sourcesContent": ["export type Predicate<T> = (value: T, key: string) => boolean;\nexport type KeyValuePair<T> = [string, T];\n\n/**\n * Returns a subset of an object, whose properties match the given predicate\n * @param obj The object whose properties should be filtered\n * @param predicate A predicate function which is applied to the object's properties\n */\nexport function filter<T = any>(\n\tobj: Record<string, T>,\n\tpredicate: Predicate<T>,\n): Record<string, T> {\n\treturn Object.fromEntries(\n\t\tObject.entries(obj).filter(([key, value]) => predicate(value, key)),\n\t);\n}\n\n/**\n * Deep merges multiple objects onto the target object.\n * This modifies the target object, so pass undefined or {}\n * to create a new object.\n */\nexport function extend(\n\ttarget: Record<string, any> | undefined | null,\n\t...sources: Record<string, any>[]\n): Record<string, any> {\n\tif (target == null) target = {};\n\tfor (const source of sources) {\n\t\tfor (const [prop, val] of Object.entries(source)) {\n\t\t\tif (val === null) {\n\t\t\t\t// copy null values\n\t\t\t\ttarget[prop] = val;\n\t\t\t} else if (\n\t\t\t\ttypeof target[prop] === \"object\" &&\n\t\t\t\ttypeof val === \"object\"\n\t\t\t) {\n\t\t\t\t// merge objects if both properties are objects\n\t\t\t\ttarget[prop] = extend(target[prop], val);\n\t\t\t} else if (typeof val === \"object\") {\n\t\t\t\t// create a copy of the source object if the target is primitive\n\t\t\t\ttarget[prop] = extend({}, val);\n\t\t\t} else {\n\t\t\t\t// copy primitive values\n\t\t\t\ttarget[prop] = val;\n\t\t\t}\n\t\t}\n\t}\n\treturn target;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAGA;;;;;;AAKM,SAAU,OACf,KACA,WAAuB;AAEvB,SAAO,OAAO,YACb,OAAO,QAAQ,GAAG,EAAE,OAAO,CAAC,CAAC,KAAK,KAAK,MAAM,UAAU,OAAO,GAAG,CAAC,CAAC;AAErE;AAOM,SAAU,OACf,WACG,SAA8B;AAEjC,MAAI,UAAU;AAAM,aAAS,CAAA;AAC7B,aAAW,UAAU,SAAS;AAC7B,eAAW,CAAC,MAAM,GAAG,KAAK,OAAO,QAAQ,MAAM,GAAG;AACjD,UAAI,QAAQ,MAAM;AAEjB,eAAO,IAAI,IAAI;MAChB,WACC,OAAO,OAAO,IAAI,MAAM,YACxB,OAAO,QAAQ,UACd;AAED,eAAO,IAAI,IAAI,OAAO,OAAO,IAAI,GAAG,GAAG;MACxC,WAAW,OAAO,QAAQ,UAAU;AAEnC,eAAO,IAAI,IAAI,OAAO,CAAA,GAAI,GAAG;MAC9B,OAAO;AAEN,eAAO,IAAI,IAAI;MAChB;IACD;EACD;AACA,SAAO;AACR;",
  "names": []
}
