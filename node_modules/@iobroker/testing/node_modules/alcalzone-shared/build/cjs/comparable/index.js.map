{
  "version": 3,
  "sources": ["../../../src/comparable/index.ts"],
  "sourcesContent": ["export type CompareResult = -1 | 0 | 1;\nexport type Comparer<T> = (a: T, b: T) => CompareResult;\nexport interface Comparable<T> {\n\tcompareTo(other: T): CompareResult;\n}\n\n/**\n * Tests if a given objects satisfies the Comparable<T> interface\n * @param obj The object to test\n */\nexport function isComparable<T>(obj: T | Comparable<T>): obj is Comparable<T> {\n\treturn (\n\t\tobj != null && typeof (obj as Comparable<T>).compareTo === \"function\"\n\t);\n}\n\n/**\n * Compares two numbers or strings. Returns 1 when the 2nd one is larger, 0 when both are equal or -1 when the 2nd one is smaller\n */\nexport function compareNumberOrString<T extends number | string>(\n\ta: T,\n\tb: T,\n): CompareResult {\n\treturn b > a ? 1 : b === a ? 0 : -1;\n}\n\n/**\n * The default comparer method to handle string, numbers and Comparable<T>.\n * @param a The first value to compare\n * @param b The second value to compare\n */\nexport function defaultComparer<T>(a: T, b: T): CompareResult {\n\tif (\n\t\ttypeof a === typeof b &&\n\t\t(typeof a === \"number\" || typeof a === \"string\")\n\t) {\n\t\treturn compareNumberOrString(a, b as typeof a);\n\t} else if (isComparable(a) && isComparable(b)) {\n\t\treturn b.compareTo(a);\n\t}\n\tthrow new Error(`cannot compare ${typeof a} with ${typeof b}`);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAMA;;;;;;;AAIM,SAAU,aAAgB,KAAsB;AACrD,SACC,OAAO,QAAQ,OAAQ,IAAsB,cAAc;AAE7D;AAKM,SAAU,sBACf,GACA,GAAI;AAEJ,SAAO,IAAI,IAAI,IAAI,MAAM,IAAI,IAAI;AAClC;AAOM,SAAU,gBAAmB,GAAM,GAAI;AAC5C,MACC,OAAO,MAAM,OAAO,MACnB,OAAO,MAAM,YAAY,OAAO,MAAM,WACtC;AACD,WAAO,sBAAsB,GAAG,CAAa;EAC9C,WAAW,aAAa,CAAC,KAAK,aAAa,CAAC,GAAG;AAC9C,WAAO,EAAE,UAAU,CAAC;EACrB;AACA,QAAM,IAAI,MAAM,kBAAkB,OAAO,CAAC,SAAS,OAAO,CAAC,EAAE;AAC9D;",
  "names": []
}
