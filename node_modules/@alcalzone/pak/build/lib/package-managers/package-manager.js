"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execaReturnValueToCommandResult = exports.PackageManager = void 0;
const tiny_glob_1 = __importDefault(require("tiny-glob"));
const fs_extra_1 = require("fs-extra");
const fs = __importStar(require("fs-extra"));
const path_1 = __importDefault(require("path"));
class PackageManager {
    constructor() {
        /** The directory to run the package manager commands in */
        this.cwd = process.cwd();
        /**
         * The environment the package manager is executed in (default: "production").
         * In an production environment, `pak` avoids accidentally pulling in `devDependencies`.
         */
        this.environment = "production";
    }
    fail(message) {
        const stderr = message;
        return Promise.resolve({
            success: false,
            exitCode: 1,
            stdout: "",
            stderr,
            stdall: stderr,
        });
    }
    /** Finds the closest parent directory that contains a package.json and the corresponding lockfile (if one was specified) */
    async findRoot(lockfile) {
        let curDir = this.cwd;
        let parentDir;
        while (true) {
            const packageJsonPath = path_1.default.join(curDir, "package.json");
            if (await (0, fs_extra_1.pathExists)(packageJsonPath)) {
                if (!lockfile)
                    return curDir;
                const lockfilePath = path_1.default.join(curDir, lockfile);
                if (await (0, fs_extra_1.pathExists)(lockfilePath))
                    return curDir;
            }
            parentDir = path_1.default.dirname(curDir);
            if (parentDir === curDir) {
                // we've reached the root without finiding a package.json
                throw new Error(`This directory tree does not contain a directory with package.json${lockfile ? " and a lockfile" : ""}!`);
            }
            curDir = parentDir;
        }
    }
    /** Resolves absolute paths of all workspaces defined in the current monorepo */
    async workspaces() {
        const packageJsonPath = path_1.default.join(this.cwd, "package.json");
        const packageJson = await fs.readJson(packageJsonPath, {
            encoding: "utf8",
        });
        const workspaces = packageJson.workspaces;
        if (!(workspaces === null || workspaces === void 0 ? void 0 : workspaces.length))
            return [];
        // Workspaces are globs we need to resolve
        const ret = new Set();
        for (const ws of workspaces) {
            const resolved = await (0, tiny_glob_1.default)(ws, {
                cwd: this.cwd,
                absolute: true,
            });
            // Check every potential directory if it contains a package.json
            for (const r of resolved) {
                const workspacePackageJsonPath = path_1.default.join(r, "package.json");
                try {
                    if ((await fs.stat(workspacePackageJsonPath)).isFile()) {
                        ret.add(r);
                    }
                }
                catch (_a) {
                    // Does not exist, ignore
                }
            }
        }
        return [...ret].sort();
    }
}
exports.PackageManager = PackageManager;
function execaReturnValueToCommandResult(result) {
    return {
        success: !result.failed &&
            !result.isCanceled &&
            !result.killed &&
            !result.timedOut,
        exitCode: result.exitCode,
        stdout: result.stdout,
        stderr: result.stderr,
        stdall: result.all,
    };
}
exports.execaReturnValueToCommandResult = execaReturnValueToCommandResult;
//# sourceMappingURL=package-manager.js.map